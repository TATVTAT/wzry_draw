name: Android NDK Build
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      NDK_URL: https://dl.google.com/android/repository/android-ndk-r27d-linux.zip
      NDK_DIR: /home/runner/android-ndk-r27d

    steps:
      # 1️⃣ 拉取代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ 计算 NDK URL 哈希值（用于缓存key自动变化）
      - name: Compute NDK key
        id: ndk-key
        run: |
          echo "key=ndk-r27d-linux-$(echo $NDK_URL | sha256sum | cut -c1-8)" >> $GITHUB_OUTPUT

      # 3️⃣ 恢复缓存（绑定URL哈希的key）
      - name: Restore Android NDK cache
        id: restore-ndk
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.NDK_DIR }}
          key: ${{ steps.ndk-key.outputs.key }}

      # 4️⃣ 如果缓存未命中 → 下载并解压
      - name: Download Android NDK
        if: steps.restore-ndk.outputs.cache-hit != 'true'
        run: |
          wget -q $NDK_URL -O ndk.zip
          unzip -q ndk.zip -d /home/runner

      # 5️⃣ 调试（可选，第一次运行建议保留看路径是否正确）
      - name: Debug NDK directory
        run: |
          echo "NDK path is: $NDK_DIR"
          ls -la /home/runner
          ls -la $NDK_DIR || echo "NDK dir missing!"

      # 6️⃣ 加入 PATH
      - name: Add NDK to PATH
        run: echo "$NDK_DIR" >> $GITHUB_PATH

      # 7️⃣ 编译
      - name: Build with ndk-build
        run: |
          "$NDK_DIR"/ndk-build \
            NDK_PROJECT_PATH=. \
            APP_BUILD_SCRIPT=Android.mk \
            NDK_APPLICATION_MK=Application.mk \
            -j$(nproc)

      # 8️⃣ **第一次运行无条件保存缓存**（保证落盘）
      - name: Save Android NDK cache
        if: steps.restore-ndk.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.NDK_DIR }}
          key: ${{ steps.ndk-key.outputs.key }}

      # 9️⃣ 上传编译产物
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ndk-output
          path: |
            libs/**
            obj/**